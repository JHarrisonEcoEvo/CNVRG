c("sample",  names(countData)[2:dim(countData)[2]])
}
}
if(is.null(names(countData)[2:dim(countData)[2]]) | any(is.na(names(countData)[2:dim(countData)[2]]))){
print("The names of the count data provided include NA or are NULL. If more informative names are desired for the output then the count matrix should have column names.")
}
return(list(
if( "p" %in% names(modelOutVI@sim$est)){
pointEstimates_p = out_ps
},
pointEstimates_pi = out_pis))
}
extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
modelOutVI <- varInf(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
algorithm = "meanfield",
output_samples = 500,
params_to_save = c("pi"))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
extract_point_estimate <- function(modelOut, countData, treatments){
#Make names for treatment groups for convenience
treats <- vector()
for (i in 1:treatments) {
treats[i] <- paste("treatment", i, sep = "_")
}
#Extract point estimates for pis
#Use different methods to obtain estimates depending upon posterior estimation method.
if(modelOut@stan_args[[1]]$method == "variational"){
#extract pi samples
pis <- modelOut@sim$samples[[1]][grep("pi",names(modelOut@sim$samples[[1]]))]
#overwrite with means
pis <- unlist(lapply(pis, FUN = mean))
organized_pis <- matrix(nrow = treatments,
ncol = (dim(countData)[2]-1))
k <- 1
for(i in unique(gsub("pi\\.(\\d+)\\.\\d+","\\1", names(pis)))){
organized_pis[k,] <- pis[gsub("pi\\.(\\d+)\\.\\d+","\\1", names(pis)) == i]
k <- k + 1
}
out_pis <-
data.frame(treats, organized_pis)
}
if(modelOut@stan_args[[1]]$method == "sampling"){
pis <- rstan::extract(modelOut, "pi")
out_pis <-
data.frame(treats, apply(pis$pi[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_pis) <-
c("treatment", names(countData)[2:dim(countData)[2]])
}
#Catch ps only if they exist
if( "p" %in% names(modelOut@sim$est)){
#Extract point estimates for ps
#Note that, for now, we use the same extraction approach regardless of sampling method
#This could change though.
if(modelOut@stan_args[[1]]$method == "variational"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
if(modelOut@stan_args[[1]]$method == "sampling"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
}
if(is.null(names(countData)[2:dim(countData)[2]]) | any(is.na(names(countData)[2:dim(countData)[2]]))){
print("The names of the count data provided include NA or are NULL. If more informative names are desired for the output then the count matrix should have column names.")
}
return(list(
if( "p" %in% names(modelOut@sim$est)){
pointEstimates_p = out_ps
},
pointEstimates_pi = out_pis))
}
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
devtools::install("../../CNVRG/")
library(gtools)
library(rstan)
library(CNVRG)
modelOutVI <- varInf(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
algorithm = "meanfield",
output_samples = 500,
params_to_save = c("pi"))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
extract_point_estimate
names(modelOutVI@sim$samples)
modelOutVI@sim$samples
modelOutVI@sim$samples$pi. 1.1
modelOutVI@sim$samples$pi.1.1
modelOutVI@sim$samples[[1]]
names(modelOutVI@sim$samples[[1]])
grep("^p\.", names(modelOutVI@sim$samples[[1]]))
grep("^p\\.", names(modelOutVI@sim$samples[[1]]))
names(modelOutVI@sim$samples[[1]])[1]
names(modelOutVI@sim$samples[[1]])[1] <- "p.1.1"
names(modelOutVI@sim$samples[[1]])
grep("^p\\.", names(modelOutVI@sim$samples[[1]]))
extract_point_estimate <- function(modelOut, countData, treatments){
#Make names for treatment groups for convenience
treats <- vector()
for (i in 1:treatments) {
treats[i] <- paste("treatment", i, sep = "_")
}
#Extract point estimates for pis
#Use different methods to obtain estimates depending upon posterior estimation method.
if(modelOut@stan_args[[1]]$method == "variational"){
#extract pi samples
pis <- modelOut@sim$samples[[1]][grep("pi",names(modelOut@sim$samples[[1]]))]
#overwrite with means
pis <- unlist(lapply(pis, FUN = mean))
organized_pis <- matrix(nrow = treatments,
ncol = (dim(countData)[2]-1))
k <- 1
for(i in unique(gsub("pi\\.(\\d+)\\.\\d+","\\1", names(pis)))){
organized_pis[k,] <- pis[gsub("pi\\.(\\d+)\\.\\d+","\\1", names(pis)) == i]
k <- k + 1
}
out_pis <-
data.frame(treats, organized_pis)
}
if(modelOut@stan_args[[1]]$method == "sampling"){
pis <- rstan::extract(modelOut, "pi")
out_pis <-
data.frame(treats, apply(pis$pi[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_pis) <-
c("treatment", names(countData)[2:dim(countData)[2]])
}
#Catch ps only if they exist
if( length(grep("^p\\.", names(modelOutVI@sim$samples[[1]]))) != 0 ){
#Extract point estimates for ps
#Note that, for now, we use the same extraction approach regardless of sampling method
#This could change though.
if(modelOut@stan_args[[1]]$method == "variational"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
if(modelOut@stan_args[[1]]$method == "sampling"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
}
if(is.null(names(countData)[2:dim(countData)[2]]) | any(is.na(names(countData)[2:dim(countData)[2]]))){
print("The names of the count data provided include NA or are NULL. If more informative names are desired for the output then the count matrix should have column names.")
}
return(list(
if(length(grep("^p\\.", names(modelOutVI@sim$samples[[1]]))) != 0 ){
pointEstimates_p = out_ps
},
pointEstimates_pi = out_pis))
}
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
modelOutVI@sim$est
modelOutVI@sim$est$pi
modelOutVI@sim$est$p
point_est$pointEstimates_pi[1,2:dim(data.frame(samps, com))[2]]
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
modelOut <- varHMC(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
chains = 2,
burn = 100,
samples = 250,
thinning_rate = 2,
cores = 4,
params_to_save = c("pi", "p"))
mns <- extract_point_estimate(modelOut = modelOut, countData = data.frame(samps,com), treatments = 2)
modelOutVI@sim$est$pi
#extract pi samples
out_pis <- modelOutVI@sim$est$p
names(countData)
names(data.frame(samps,com))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
modelOutVI@sim$est$pi
extract_point_estimate()
extract_point_estimate
modelOutVI@sim$samples[[1]][grep("pi",names(modelOutVI@sim$samples[[1]]))]
piz <- modelOutVI@sim$samples[[1]][grep("pi",names(modelOutVI@sim$samples[[1]]))]
extract_point_estimate
unlist(lapply(piz, FUN = mean))
modelOutVI@sim$est$pi
piz
piz[[1]]
names(piz)
modelOutVI@sim$est$pi
unlist(lapply(piz, FUN = mean))
modelOutVI@sim$est$p
devtools::install("../../CNVRG/")
#This script is for internal use and was a sanity check.
library(gtools)
library(rstan)
library(CNVRG)
set.seed(1245)
options(scipen=99)
#Simulate some data
notus <- 50
nsamples <- 5000
nreps <- 100
intensity <- 100 #high intensity means deviates vary less and will be easier to predict
comprop <- matrix(0, ncol = notus, nrow = 2)
indprop <- matrix(0, ncol = notus, nrow = nreps)
#Assemblage 1
comprop[1, ] <- rdirichlet(1, c(rep(15, 5), rep(1, notus - 5)))
#Assemblage 2
comprop[2, ] <- rdirichlet(1, c(rep(1, notus - 5), rep(15, 5)))
#Construct data matrix
com <- matrix(0, ncol = notus, nrow = nreps)
for (i in 1:(nreps / 2)) {
indprop[i, ] <- rdirichlet(1, comprop[1, ] * intensity)
com[i, ] <- rmultinom(1, nsamples, prob = indprop[i, ])
}
for (i in (1 + nreps / 2):nreps) {
indprop[i, ] <- rdirichlet(1, comprop[2, ] * intensity)
com[i, ] <- rmultinom(1, nsamples, prob = indprop[i, ])
}
com <- com + 1
nsamples <- nsamples + 50
#make a dummy sample vector
samps <- rep("sampleX", nreps)
modelOut <- varHMC(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
chains = 2,
burn = 100,
samples = 250,
thinning_rate = 2,
cores = 4,
params_to_save = c("pi", "p"))
mns <- extract_point_estimate(modelOut = modelOut, countData = data.frame(samps,com), treatments = 2)
par(mfrow = c(1,2))
plot(comprop[1,], mns$pointEstimates_pi[1,2:51])
abline(0,1)
plot(comprop[2,], mns$pointEstimates_pi[2,2:51])
abline(0,1)
plot(indprop[1,], mns$pointEstimates_p[1,2:51])
abline(0,1)
plot(indprop[2,], mns$pointEstimates_p[2,2:51])
abline(0,1)
modelOutVI <- varInf(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
algorithm = "meanfield",
output_samples = 500,
params_to_save = c("pi"))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
par(mfrow = c(1,2))
plot(comprop[1,], mns$pointEstimates_pi[1,2:51])
abline(0,1)
plot(comprop[2,], mns$pointEstimates_pi[2,2:51])
abline(0,1)
plot(indprop[1,], mns$pointEstimates_p[1,2:51])
abline(0,1)
plot(indprop[2,], mns$pointEstimates_p[2,2:51])
abline(0,1)
par(mfrow = c(1,2))
plot(comprop[1,], point_est$pointEstimates_pi[1,2:dim(data.frame(samps, com))[2]])
abline(0,1)
plot(comprop[2,], point_est$pointEstimates_pi[2,2:dim(data.frame(samps, com))[2]])
abline(0,1)
plot(indprop[1,], point_est$pointEstimates_p[1,2:51])
abline(0,1)
plot(indprop[2,], point_est$pointEstimates_p[2,2:51])
abline(0,1)
mns$pointEstimates_p
mns$pointEstimates_pi
mns$pointEstimates_p
str(mns)
modelOut <- varHMC(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
chains = 2,
burn = 100,
samples = 250,
thinning_rate = 2,
cores = 4,
params_to_save = c("pi", "p"))
mns <- extract_point_estimate(modelOut = modelOut, countData = data.frame(samps,com), treatments = 2)
str(mns)
mns$pointEstimates_p
mns$pointEstimates_pi
extract_point_estimate <- function(modelOut, countData, treatments){
#Make names for treatment groups for convenience
treats <- vector()
for (i in 1:treatments) {
treats[i] <- paste("treatment", i, sep = "_")
}
#Extract point estimates for pis
#Use different methods to obtain estimates depending upon posterior estimation method.
if(modelOut@stan_args[[1]]$method == "variational"){
#extract pi samples
out_pis <- modelOutVI@sim$est$pi
names(out_pis) <- names(countData)[2:length(names(countData))]
}
if(modelOut@stan_args[[1]]$method == "sampling"){
pis <- rstan::extract(modelOut, "pi")
out_pis <-
data.frame(treats, apply(pis$pi[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_pis) <-
c("treatment", names(countData)[2:dim(countData)[2]])
}
#Catch ps only if they exist
if( length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0 ){
#Extract point estimates for ps
#Note that, for now, we use the same extraction approach regardless of sampling method
#This could change though.
if(modelOut@stan_args[[1]]$method == "variational"){
out_ps <-  modelOutVI@sim$est$p
names(out_ps) <- names(countData)[2:dim(countData)[2]]
}
if(modelOut@stan_args[[1]]$method == "sampling"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
}
if(is.null(names(countData)[2:dim(countData)[2]]) | any(is.na(names(countData)[2:dim(countData)[2]]))){
print("The names of the count data provided include NA or are NULL. If more informative names are desired for the output then the count matrix should have column names.")
}
return(list(
if(length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0 ){
pointEstimates_p = out_ps
},
pointEstimates_pi = out_pis))
}
mns <- extract_point_estimate(modelOut = modelOut, countData = data.frame(samps,com), treatments = 2)
str(mns)
extract_point_estimate
modelOutVI <- varInf(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
algorithm = "meanfield",
output_samples = 500,
params_to_save = c("pi","p"))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
point_est
point_est$pointEstimates_pi
extract_point_estimate <- function(modelOut, countData, treatments){
#Make names for treatment groups for convenience
treats <- vector()
for (i in 1:treatments) {
treats[i] <- paste("treatment", i, sep = "_")
}
#Extract point estimates for pis
#Use different methods to obtain estimates depending upon posterior estimation method.
if(modelOut@stan_args[[1]]$method == "variational"){
#extract pi samples
out_pis <- modelOutVI@sim$est$pi
names(out_pis) <- names(countData)[2:length(names(countData))]
}
if(modelOut@stan_args[[1]]$method == "sampling"){
pis <- rstan::extract(modelOut, "pi")
out_pis <-
data.frame(treats, apply(pis$pi[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_pis) <-
c("treatment", names(countData)[2:dim(countData)[2]])
}
#Catch ps only if they exist
if( length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0 ){
#Extract point estimates for ps
#Note that, for now, we use the same extraction approach regardless of sampling method
#This could change though.
if(modelOut@stan_args[[1]]$method == "variational"){
out_ps <-  modelOutVI@sim$est$p
names(out_ps) <- names(countData)[2:dim(countData)[2]]
}
if(modelOut@stan_args[[1]]$method == "sampling"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
names(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
}
if(is.null(names(countData)[2:dim(countData)[2]]) | any(is.na(names(countData)[2:dim(countData)[2]]))){
print("The names of the count data provided include NA or are NULL. If more informative names are desired for the output then the count matrix should have column names.")
}
if(length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0 & length(grep("^pi\\.", names(modelOut@sim$samples[[1]]))) != 0){
return(list(
pointEstimates_p = out_ps,
pointEstimates_pi = out_pis)
)}else if(length(grep("^pi\\.", names(modelOut@sim$samples[[1]]))) != 0 & length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) == 0){
return(list(
pointEstimates_pi = out_pis)
)
}else if(length(grep("^pi\\.", names(modelOut@sim$samples[[1]]))) == 0 & length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0){
return(list(
pointEstimates_p = out_ps)
)
}
}
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
point_est
extract_point_estimate <- function(modelOut, countData, treatments){
#Make names for treatment groups for convenience
treats <- vector()
for (i in 1:treatments) {
treats[i] <- paste("treatment", i, sep = "_")
}
#Extract point estimates for pis
#Use different methods to obtain estimates depending upon posterior estimation method.
if(modelOut@stan_args[[1]]$method == "variational"){
#extract pi samples
out_pis <- modelOutVI@sim$est$pi
colnames(out_pis) <- names(countData)[2:length(names(countData))]
}
if(modelOut@stan_args[[1]]$method == "sampling"){
pis <- rstan::extract(modelOut, "pi")
out_pis <-
data.frame(treats, apply(pis$pi[, , ], MARGIN = c(2, 3), FUN = mean))
colnames(out_pis) <-
c("treatment", names(countData)[2:dim(countData)[2]])
}
#Catch ps only if they exist
if( length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0 ){
#Extract point estimates for ps
#Note that, for now, we use the same extraction approach regardless of sampling method
#This could change though.
if(modelOut@stan_args[[1]]$method == "variational"){
out_ps <-  modelOutVI@sim$est$p
colnames(out_ps) <- names(countData)[2:dim(countData)[2]]
}
if(modelOut@stan_args[[1]]$method == "sampling"){
ps <- rstan::extract(modelOut, "p")
out_ps <- data.frame(countData[,1], apply(ps$p[, , ], MARGIN = c(2, 3), FUN = mean))
colnames(out_ps) <-
c("sample",  names(countData)[2:dim(countData)[2]])
}
}
if(is.null(names(countData)[2:dim(countData)[2]]) | any(is.na(names(countData)[2:dim(countData)[2]]))){
print("The names of the count data provided include NA or are NULL. If more informative names are desired for the output then the count matrix should have column names.")
}
if(length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0 & length(grep("^pi\\.", names(modelOut@sim$samples[[1]]))) != 0){
return(list(
pointEstimates_p = out_ps,
pointEstimates_pi = out_pis)
)}else if(length(grep("^pi\\.", names(modelOut@sim$samples[[1]]))) != 0 & length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) == 0){
return(list(
pointEstimates_pi = out_pis)
)
}else if(length(grep("^pi\\.", names(modelOut@sim$samples[[1]]))) == 0 & length(grep("^p\\.", names(modelOut@sim$samples[[1]]))) != 0){
return(list(
pointEstimates_p = out_ps)
)
}
}
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
point_est
modelOutVI <- varInf(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
algorithm = "meanfield",
output_samples = 500,
params_to_save = c("pi"))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
point_est
modelOutVI <- varInf(countData = data.frame(samps,com),
starts = c(1,51),
ends = c(50,100),
algorithm = "meanfield",
output_samples = 500,
params_to_save = c("p"))
point_est <- extract_point_estimate(modelOut = modelOutVI, countData = data.frame(samps,com), treatments = 2)
point_est
devtools::check("../../CNVRG/")
rm(list=ls())
devtools::check("../../CNVRG/")
devtools::build_win()
devtools::build("../../CNVRG/", vignettes = T)
citation()
R()
R
versoin()
version()
devtools::build("../../CNVRG/", vignettes = T)
devtools::build("../../CNVRG/", vignettes = T)
devtools::install("../../CNVRG 2/")
devtools::build("../../CNVRG/")
devtools::install("../../CNVRG/")
library(CNVRG)
devtools::build("../../CNVRG/")
devtools::build("../../CNVRG/", vignettes = T)
library(CNVRG)
devtools::build("../../CNVRG/", vignettes = T)
devtools::build_vignettes("../../CNVRG/")
devtools::build_vignettes("../../CNVRG/")
devtools::build_vignettes("../../CNVRG/")
devtools::build_vignettes("../../CNVRG/")
devtools::build("../../CNVRG/", vignettes = T)
devtools::build_vignettes("../../CNVRG/")
.Last.error.trace
devtools::build_vignettes("../../CNVRG/")
devtools::build_vignettes("../../CNVRG/")
devtools::build("../../CNVRG/", vignettes = T)
library(devtools)
devtools::build("../../CNVRG/", vignettes = F)
devtools::build("../../CNVRG/", vignettes = F)
devtools::build("../../CNVRG/", vignettes = F)
devtools::build("../../CNVRG/", vignettes = F)
devtools::install("../../CNVRG/")
devtools::build("../../CNVRG/", vignettes = T)
devtools::install("../../CNVRG\ 2/")
devtools::build("../../CNVRG/", vignettes = T)
devtools::install("../../CNVRG\ 2/")
devtools::install("../../CNVRG/")
