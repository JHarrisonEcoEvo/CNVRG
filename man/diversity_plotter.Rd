% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convrg_func.R
\name{diversity_plotter}
\alias{diversity_plotter}
\title{Plot diversity posterior probability distributions}
\usage{
diversity_plotter(
  div,
  color_vec = "black",
  xlim = c(0, 1.1 * max(unlist(div$entropy_pi))),
  ylim = c(0, 1.1 * max(densities)),
  las = 2,
  ylab = "density",
  xlab = "entropy",
  frame.plot = F,
  ...
)
}
\arguments{
\item{div}{Output of CNVRG's diversity_calc function.}

\item{color_vec}{A vector of colors with an element for each sampling group.}

\item{xlim}{A vector defining the x-axis range.}

\item{ylim}{A vector defining the y-axis range.}

\item{las}{Plotting command to change the orientation of axis labels.}

\item{ylab}{A character string for labeling the y axis.}

\item{xlab}{A character string for labeling the x axis.}

\item{frame.plot}{Boolean, put a box around the plot or not.}
}
\value{
A plot.
}
\description{
Simple function to plot density curves for diversity posteriors. This function takes
the output of the diversity_calc function and a vector of colors of your choosing.
Look into the viridis package to make a nice color vector. For additional functionality,
simply look inside this function to find the plotting code and modify it as you need.
}
\details{
This function will pass any of the standard plotting commands along, so feel free to add them.
}
\examples{
#simulate an OTU table
com_demo <-matrix(0, nrow = 10, ncol = 10)
com_demo[1:5,] <- c(rep(3,5), rep(7,5)) #Alternates 3 and 7
com_demo[6:10,] <- c(rep(7,5), rep(3,5)) #Reverses alternation
fornames <- NA
for(i in 1:length(com_demo[1,])){
fornames[i] <- paste("otu_", i, sep = "")
}
sample_vec <- NA
for(i in 1:length(com_demo[,1])){
sample_vec[i] <- paste("sample", i, sep = "_")
}
com_demo <- data.frame(sample_vec, com_demo)
names(com_demo) <- c("sample", fornames)

out <- cnvrg_VI(com_demo,starts = c(1,6), ends=c(5,10))
div <- diversity_calc(model_out = out,params = c("pi","p"),
countData = com_demo, entropy_measure = 'shannon')
diversity_plotter(div)
}
